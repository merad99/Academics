package com.merribiAdil.ArrayList;

import static org.junit.Assert.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Random;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class IOManagerTest {

	IOManager<Object> ioManager1;
	IOManager<Object> ioManager2;

	final String TEST_PATH_1 = System.getProperty("user.dir")+File.separator+"IOManagerTestFile1";
	final String TEST_PATH_2 = System.getProperty("user.dir")+File.separator+"IOManagerTestFile2";

	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	void setUp() throws Exception {
		File f = new File(TEST_PATH_1);

		f.getParentFile().mkdirs(); 
		f.createNewFile();

		ioManager1 = new SimpleIOManager(); //Add your constructor
		ioManager2 = new SimpleIOManager(); //Add your constructor
	}

	@AfterEach
	void tearDown() throws Exception {
		File file = new File(TEST_PATH_1);
		file.delete();
	}

	@Test
	void read_EmptyFile_Test() throws ClassNotFoundException, IOException {		
		ioManager1.setPath(TEST_PATH_1);

		assertNull(ioManager1.read());

	}

	@Test
	void read_IllegalStateException_Test() throws ClassNotFoundException, IOException {		
		ioManager1.setPath(TEST_PATH_1);

		assertNull(ioManager1.read());

	}

	@Test
	void readAndWriteTest() throws ClassNotFoundException, IOException {		
		ioManager1.setPath(TEST_PATH_1);
		ioManager2.setPath(TEST_PATH_1);

		String testString  = randomString();

		ioManager1.write(testString);

		assertEquals(testString, ioManager2.read());

	}
	
	@Test
	void readAndWrite_MultiFile_Test() throws ClassNotFoundException, IOException {		
		ioManager1.setPath(TEST_PATH_1);
		ioManager2.setPath(TEST_PATH_1);

		String testString  = randomString();

		ioManager1.write(testString);

		assertEquals(testString, ioManager2.read());
		
		ioManager1.setPath(TEST_PATH_2);
		ioManager2.setPath(TEST_PATH_2);

		testString  = randomString();

		ioManager1.write(testString);

		assertEquals(testString, ioManager2.read());

	}

	@Test
	void writeTest() throws ClassNotFoundException, IOException {		
		ioManager1.setPath(TEST_PATH_1);

		File file = new File(TEST_PATH_1);

		long fileSize =  file.length();

		String testString  = randomString();

		ioManager1.write(testString);

		assertNotEquals(fileSize, file.length());
	}

	@Test
	void write_MultiFile_Test() throws ClassNotFoundException, IOException {		
		ioManager1.setPath(TEST_PATH_1);

		File file1 = new File(TEST_PATH_1);

		long fileSize = file1.length();

		String testString = randomString();

		ioManager1.write(testString);

		assertNotEquals(fileSize, file1.length());

		ioManager1.setPath(TEST_PATH_2);

		File file2 = new File(TEST_PATH_2);

		fileSize =  file2.length();

		testString = randomString();

		ioManager1.write(testString);

		assertNotEquals(fileSize, file2.length());
	}

	@Test
	void get_NotSet_PathTest() throws FileNotFoundException, IllegalArgumentException {
		assertEquals("", ioManager1.getPath());
	}

	@Test
	void getAndSetPathTest() throws FileNotFoundException, IllegalArgumentException {
		String testString  = randomString();

		ioManager1.setPath(testString);

		assertEquals(testString, ioManager1.getPath());

	}

	@Test
	void setPath_FileNotFoundException_Test() {
		try {
			ioManager1.setPath(randomString());
			fail("FileNotFoundException should be thrown");
		} catch (FileNotFoundException e) {
			//Success!
		}
	}

	@Test
	void setPath_IllegalArgumentException_Test() {
		try {
			ioManager1.setPath(System.getProperty("user.dir"));
			fail("IllegalArgumentException should be thrown");
		} catch (FileNotFoundException e) {
			fail("IllegalArgumentException should be thrown");
		} catch (IllegalArgumentException e) {
			//Success!
		}
	}

	public String randomString() {
		byte[] array = new byte[10]; // length is bounded by 7
		new Random().nextBytes(array);
		return new String(array, Charset.forName("UTF-8"));
	}


}
