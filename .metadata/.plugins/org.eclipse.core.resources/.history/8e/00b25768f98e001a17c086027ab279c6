import java.io.FileNotFoundException;
import java.util.Map;
import edu.princeton.cs.algs4.*;

public class ShortestWPath {
	
	
	private DirectedEdge[] edgeTo;
	private double[] distTo;
	private IndexMinPQ<Double> pq;
	
	public ShortestWPath(EdgeWeightedDigraph G, int s)
	{
		for (DirectedEdge e : G.edges()) {
            if (e.weight() < 0)
                throw new IllegalArgumentException("edge " + e + " has negative weight");
        }
		
		distTo = new double[G.V()];
        edgeTo = new DirectedEdge[G.V()];
        
        for (int v = 0; v < G.V(); v++)
            distTo[v] = Double.POSITIVE_INFINITY;
        distTo[s] = 0.0;

        // relax vertices in order of distance from s
        pq = new IndexMinPQ<Double>(G.V());
        pq.insert(s, distTo[s]);
        while (!pq.isEmpty()) {
            int v = pq.delMin();
            for (DirectedEdge e : G.adj(v))
                relax(e);
        }

    }

    // relax edge e and update pq if changed
    private void relax(DirectedEdge e) {
        int v = e.from(), w = e.to();
        if (distTo[w] > distTo[v] + e.weight()) {
            distTo[w] = distTo[v] + e.weight();
            edgeTo[w] = e;
            if (pq.contains(w)) pq.decreaseKey(w, distTo[w]);
            else                pq.insert(w, distTo[w]);
        }
    }
    
	public double distTo(int v)
	{ return distTo[v]; }
	
	public boolean hasPathTo(int v)
	{ return distTo[v] < Double.POSITIVE_INFINITY; }
	
	public Iterable<DirectedEdge> pathTo(int v)
	{
		if (!hasPathTo(v)) return null;
		Stack<DirectedEdge> path = new Stack<DirectedEdge>();
		for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()])
			path.push(e);
		return path;
	}
	
	public static void main(String[] args) {
		MetroGraph2 mG = null;
		try {
			mG = new MetroGraph2("/Users/adilmerribi/eclipse-workspace/CS310_pa4/bostonmetro.csv");
		} catch (FileNotFoundException e) {
			
			System.out.println("File not found: " + args[0]);
		}
		EdgeWeightedDigraph G=mG.getEdgeWeightedDigraph();
		Map<Integer,Platform> platformMap = mG.getPlatformData();
		Platform p;
		p = platformMap.get(14);
		int src = p.getPlatformId();
		ShortestWPath bfs = new ShortestWPath(G, src);
		p = platformMap.get(1);
		int dest = p.getPlatformId();
		//for (int t = 0; t < G.V(); t++) {
			if (bfs.hasPathTo(dest)) {
            	System.out.printf("%d to %d (%.2f):  ", src, dest, bfs.distTo(dest));
                for (DirectedEdge x : bfs.pathTo(dest)) {
                	p = platformMap.get(x);
                	System.out.printf(x + "   ");
                }
                System.out.println();
            }
            else 
            	System.out.printf("not connected\n");
		//}
            
	}

}
