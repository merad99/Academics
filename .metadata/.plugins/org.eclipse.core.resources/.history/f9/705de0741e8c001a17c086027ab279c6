

import java.io.FileNotFoundException;
import java.util.Map;

import edu.princeton.cs.algs4.*;

public class ShortestPath {
	private boolean[] marked; // Is a shortest path to this vertex known?
	private int[] edgeTo; // last vertex on known path to this vertex
	private final int s; // source
	
	public ShortestPath(Graph G, int s)
	{
		marked = new boolean[G.V()];
		edgeTo = new int[G.V()];
		this.s = s;
		bfs(G, s);
	}
	private void bfs(Graph G, int s)
	{
		Queue<Integer> queue = new Queue<Integer>();
		marked[s] = true; // Mark the source
		queue.enqueue(s); // and put it on the queue.
		while (!queue.isEmpty())
		{
			int v = queue.dequeue(); // Remove next vertex from the queue.
			for (int w : G.adj(v))
				if (!marked[w]) // For every unmarked adjacent vertex,
				{
					edgeTo[w] = v; // save last edge on a shortest path,
					marked[w] = true; // mark it because path is known,
					queue.enqueue(w); // and add it to the queue.
				}
		}
	}
	public boolean hasPathTo(int v){ 

		return marked[v]; 

	}

	public Iterable<Integer> pathTo(int v){
		if (!hasPathTo(v)) return null;
		Stack<Integer> path = new Stack<Integer>();
		for (int x = v; x != s; x = edgeTo[x])
			path.push(x);
		path.push(s);
		return path;
	}
	
	public static void main(String[] args) {
		MetroGraph1 mG = null;
		try {
			mG = new MetroGraph1(args[0]);
		} catch (FileNotFoundException e) {
			System.out.println("File not found: " + args[0]);
		}
		Graph G=mG.getGraph();
		int s = Integer.parseInt(args[1]);
		ShortestPath bfs = new ShortestPath(G, s);
		
            if (bfs.hasPathTo(1)) {
            	System.out.printf("%d to %d (%d):  ", s, 1, bfs.distTo(1));
                for (int x : bfs.pathTo(1)) {
                    if (x == s) System.out.println(x);
                    else        System.out.printf("-" + x);
                }
                System.out.println();
            }

            else {
            	System.out.printf("%d to %d (-):  not connected\n", s, 1);
            }

		
	}
	

}
